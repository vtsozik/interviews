#include <map>
#include <set>
#include <list>
#include <cmath>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>
#include <string>
#include <bitset>
#include <cstdio>
#include <limits>
#include <vector>
#include <climits>
#include <cstring>
#include <cstdlib>
#include <fstream>
#include <numeric>
#include <sstream>
#include <iostream>
#include <algorithm>
#include <unordered_map>
#include <string>
#include <iostream>

using namespace std;

struct TickerVolume {
    string m_ticker;
    unsigned int m_volume;
    bool operator<(const TickerVolume &r) const
    {
        if (this->m_volume == r.m_volume)
        {
            return this->m_ticker < r.m_ticker;
        }
        return this->m_volume < r.m_volume;
    }
};

set<TickerVolume> g_vts;
unordered_map<string, set<TickerVolume>::iterator> g_tvm;

void execute_trade(string ticker, unsigned int volume)
{
    cout << "Trade:" << ticker << ":" << volume << endl;
    TickerVolume tv({ticker, volume});
    auto iter(g_tvm.find(ticker));
    if (iter != g_tvm.end())
    {
	tv.m_volume += iter->second->m_volume;
        g_vts.erase(iter->second);
	iter->second = g_vts.insert(tv).first;
    } 
    else 
    {
        g_tvm.insert(make_pair(ticker, g_vts.insert(tv).first));
    }
}

void print_top_stocks(int top_n)
{
    cout << "Implement me" << endl;
    for (auto p(make_pair(g_vts.rbegin(), 1)); p.first != g_vts.rend() && p.second <= top_n; ++p.first, ++p.second)
    {
        cout << p.first->m_ticker << '|' << p.first->m_volume << endl;
    }
}


int main(int argc, char* argv[])
{
  execute_trade("MSFT", 400);
  print_top_stocks(4);
  execute_trade("IBM", 1000);
  print_top_stocks(4);
  print_top_stocks(2);
  execute_trade("AAPL", 500);
  execute_trade("AAPL", 600);
  execute_trade("NFLX", 1000);
  execute_trade("AMZN", 700);
  execute_trade("GOGL", 300);
  // Check output below generated by this line
  print_top_stocks(4);
}

/* the above code should produce the following output

AAPL|1100
NFLX|1000
IBM|1000
AMZN|700

*/
