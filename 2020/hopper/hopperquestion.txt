#include <vector>
#include <string>
#include <iostream>
#include <sstream>

using namespace std;

enum Type { OUTPUT, ANSWER, GOTO, CONCLUSION };

class InputLine {
public:
  virtual Type type() const = 0;
  virtual bool hasLabel() const = 0;
  virtual int getLabel() const = 0;
  virtual const string& getText() const = 0;

  virtual ~InputLine() {}

  friend ostream& operator<< (ostream& o, const InputLine& l) { l.toStream(o); return o; }

private:
  virtual void toStream(ostream& o) const = 0;
};

class Output : public InputLine {
public:
  Output(string t, bool h, int l) : text(move(t)), has_label(h), label(l) {}
  Output(string t) : text(move(t)), has_label(false), label(-1) {}

  Type type() const { return OUTPUT; }
  bool hasLabel() const { return has_label; }
  int getLabel() const { return label; }
  const string& getText() const { return text; }

private:
  void toStream(ostream&) const;

  string text;
  bool has_label;
  int label;
};

class Answer : public InputLine {
public:
  Answer(string t) : text(move(t)) {}

  Type type() const { return ANSWER; }
  bool hasLabel() const { return false; }
  int getLabel() const { return -1; }
  const string& getText() const { return text; }

private:
  void toStream(ostream&) const;

  string text;
};

class Goto : public InputLine {
public:
  Goto(int l) : label(l) {}

  Type type() const { return GOTO; }
  bool hasLabel() const { return true; }
  int getLabel() const { return label; }
  const string& getText() const { return empty_string; }

private:
  void toStream(ostream&) const;

  int label;
  static const string empty_string;
};
const string Goto::empty_string;

class Conclusion : public InputLine {
public:
  Conclusion(string t) : text(move(t)) {}

  Type type() const { return CONCLUSION; }
  bool hasLabel() const { return false; }
  int getLabel() const { return -1; }
  const string& getText() const { return text; }

private:
  void toStream(ostream&) const;

  string text;
};

struct IndentedLine {
  int indent;
  InputLine& line;
};
ostream& operator<< (ostream& o, const IndentedLine& il);


void printConversation(const vector<IndentedLine>& flattree, const vector<string>& answers) {
  for (const auto& il : flattree) {
    cout << il << endl;
  }
  cout << "---" << endl;
  for (const auto& s : answers) {
    cout << s << endl;
  }
}

Input (stdin)
Run as Custom Input
|
Download
Hello, John! It looks like you booked a Basic Economy flight.
Are you aware that this flight doesn't have any storage for carry-on luggage?
 -No
  Some other limitations you may want to consider is that you will not be able to pick a seat.
  We're happy to let you know that we can upgrade you today for just $25!
  Would you like to do that now?
   -Not right now
    =Okay, please let our customer service team know if you change your mind.
   -Yes, please upgrade
    =Okay, you've been upgraded!
 -Yes
  We're happy to let you know that we can upgrade you today for just $25!
  Would you like to do that now?
   -Not right now
    =Okay, please let our customer service team know if you change your mind.
   -Yes, please upgrade
    =Okay, you've been upgraded!
---
No
Not right now
Your Output (stdout)
IndentedLine(indent=0, line=Output(text="Hello, John! It looks like you booked a Basic Economy flight."))
IndentedLine(indent=0, line=Output(text="Are you aware that this flight doesn't have any storage for carry-on luggage?"))
IndentedLine(indent=1, line=Answer(text="No"))
IndentedLine(indent=2, line=Output(text="Some other limitations you may want to consider is that you will not be able to pick a seat."))
IndentedLine(indent=2, line=Output(text="We're happy to let you know that we can upgrade you today for just $25!"))
IndentedLine(indent=2, line=Output(text="Would you like to do that now?"))
IndentedLine(indent=3, line=Answer(text="Not right now"))
IndentedLine(indent=4, line=Conclusion(text="Okay, please let our customer service team know if you change your mind."))
IndentedLine(indent=3, line=Answer(text="Yes, please upgrade"))
IndentedLine(indent=4, line=Conclusion(text="Okay, you've been upgraded!"))
IndentedLine(indent=1, line=Answer(text="Yes"))
IndentedLine(indent=2, line=Output(text="We're happy to{-truncated-}
Expected Output
Download
Hopper: Hello, John! It looks like you booked a Basic Economy flight.
Hopper: Are you aware that this flight doesn't have any storage for carry-on luggage?
User: No
Hopper: Some other limitations you may want to consider is that you will not be able to pick a seat.
Hopper: We're happy to let you know that we can upgrade you today for just $25!
Hopper: Would you like to do that now?
User: Not right now
Conclusion: Okay, please let our customer service team know if you change your mind.

Hello, John! It looks like you booked a Basic Economy flight.
Are you aware that this flight doesn't have any storage for carry-on luggage?
 -Yes
  >1
 -No
  Some other limitations you may want to consider is that you will not be able to pick a seat.
  1:We're happy to let you know that we can upgrade you today for just $25!
  Would you like to do that now?
   -Not right now
    =Okay, please let our customer service team know if you change your mind.
   -Yes, please upgrade
    =Okay, you've been upgraded!
---
No
Not right now
Your Output (stdout)
IndentedLine(indent=0, line=Output(text="Hello, John! It looks like you booked a Basic Economy flight."))
IndentedLine(indent=0, line=Output(text="Are you aware that this flight doesn't have any storage for carry-on luggage?"))
IndentedLine(indent=1, line=Answer(text="Yes"))
IndentedLine(indent=2, line=Goto(label=1))
IndentedLine(indent=1, line=Answer(text="No"))
IndentedLine(indent=2, line=Output(text="Some other limitations you may want to consider is that you will not be able to pick a seat."))
IndentedLine(indent=2, line=Output(text="We're happy to let you know that we can upgrade you today for just $25!", label=1))
IndentedLine(indent=2, line=Output(text="Would you like to do that now?"))
IndentedLine(indent=3, line=Answer(text="Not right now"))
IndentedLine(indent=4, line=Conclusion(text="Okay, please let our customer service team know if you change your mind."))
IndentedLine(indent=3, line=Answer(text="Yes, please upgrade"))
IndentedLine(indent=4, line=Conclusion(text="Okay, you've been upgraded!"))
---{-truncated-}
Expected Output
Download
Hopper: Hello, John! It looks like you booked a Basic Economy flight.
Hopper: Are you aware that this flight doesn't have any storage for carry-on luggage?
User: No
Hopper: Some other limitations you may want to consider is that you will not be able to pick a seat.
Hopper: We're happy to let you know that we can upgrade you today for just $25!
Hopper: Would you like to do that now?
User: Not right now
Conclusion: Okay, please let our customer service team know if you change your mind.

Hello, John! It looks like you booked a Basic Economy flight.
Are you aware that this flight doesn't have any storage for carry-on luggage?
 -No
  Some other limitations you may want to consider is that you will not be able to pick a seat.
  1:We're happy to let you know that we can upgrade you today for just $25!
  Would you like to do that now?
   -Not right now
    =Okay, please let our customer service team know if you change your mind.
   -Yes, please upgrade
    =Okay, you've been upgraded!
 -Yes
  >1
---
Yes
Yes, please upgrade
Your Output (stdout)
IndentedLine(indent=0, line=Output(text="Hello, John! It looks like you booked a Basic Economy flight."))
IndentedLine(indent=0, line=Output(text="Are you aware that this flight doesn't have any storage for carry-on luggage?"))
IndentedLine(indent=1, line=Answer(text="No"))
IndentedLine(indent=2, line=Output(text="Some other limitations you may want to consider is that you will not be able to pick a seat."))
IndentedLine(indent=2, line=Output(text="We're happy to let you know that we can upgrade you today for just $25!", label=1))
IndentedLine(indent=2, line=Output(text="Would you like to do that now?"))
IndentedLine(indent=3, line=Answer(text="Not right now"))
IndentedLine(indent=4, line=Conclusion(text="Okay, please let our customer service team know if you change your mind."))
IndentedLine(indent=3, line=Answer(text="Yes, please upgrade"))
IndentedLine(indent=4, line=Conclusion(text="Okay, you've been upgraded!"))
IndentedLine(indent=1, line=Answer(text="Yes"))
IndentedLine(indent=2, line=Goto(label=1))
---{-truncated-}
Expected Output
Download
Hopper: Hello, John! It looks like you booked a Basic Economy flight.
Hopper: Are you aware that this flight doesn't have any storage for carry-on luggage?
User: Yes
Hopper: We're happy to let you know that we can upgrade you today for just $25!
Hopper: Would you like to do that now?
User: Yes, please upgrade
Conclusion: Okay, you've been upgraded!

Hello world.
Good luck on your test!
 -Thanks!
  =Goodbye!
---
What test?
Thanks!
Your Output (stdout)
IndentedLine(indent=0, line=Output(text="Hello world."))
IndentedLine(indent=0, line=Output(text="Good luck on your test!"))
IndentedLine(indent=1, line=Answer(text="Thanks!"))
IndentedLine(indent=2, line=Conclusion(text="Goodbye!"))
---
What test?
Thanks!
Expected Output
Download
Hopper: Hello world.
Hopper: Good luck on your test!
User: What test?
Hopper: Invalid input
User: Thanks!
Conclusion: Goodbye!

Hello world.
Good luck on your test!
 -Thanks!
  =Goodbye!
---
Thanks!
Your Output (stdout)
IndentedLine(indent=0, line=Output(text="Hello world."))
IndentedLine(indent=0, line=Output(text="Good luck on your test!"))
IndentedLine(indent=1, line=Answer(text="Thanks!"))
IndentedLine(indent=2, line=Conclusion(text="Goodbye!"))
---
Thanks!
Expected Output
Download
Hopper: Hello world.
Hopper: Good luck on your test!
User: Thanks!
Conclusion: Goodbye!
